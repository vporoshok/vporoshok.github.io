<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Алгоритмы on Где-то на дальнем сервере</title>
    <link>https://vporoshok.me/categories/algorithm/</link>
    <description>Recent content in Алгоритмы on Где-то на дальнем сервере</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language><atom:link href="https://vporoshok.me/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Распределённые алгоритмы</title>
      <link>https://vporoshok.me/post/2020/01/distributed-algorithms/</link>
      <pubDate>Tue, 07 Jan 2020 13:37:25 +0000</pubDate>
      
      <guid>https://vporoshok.me/post/2020/01/distributed-algorithms/</guid>
      <description>В этой заметке разбираются базовые понятия и определения, используемые при рассмотрении распределённых систем и алгоритмов, выполняемых на них. Терминология позаимствована из книги Уона Фоккинка «Распределенные алгоритмы. Интуитивный подход»1.
Что такое распределённая система? Определение распределённой системы базируется на определениях её базовых частей. Подходы же, применяемые в алгоритмах, рассчитанных на распределённое вычисление находят применение и за пределами распределённых систем в их базовом понимании. Поэтому будем понимать определение распредённой системы расширено.
Базовой составляющей распределённой системы является процесс.</description>
    </item>
    
    <item>
      <title>SICP: 1.1 Элементы программирования</title>
      <link>https://vporoshok.me/post/2019/10/sicp-elementary/</link>
      <pubDate>Fri, 04 Oct 2019 15:17:31 +0000</pubDate>
      
      <guid>https://vporoshok.me/post/2019/10/sicp-elementary/</guid>
      <description>Префиксная нотация и комбинации Программа на языке Лисп представляет из себя набор комбинаций (combination) и особых форм (special form). Комбинациями называются кортежи, состоящие из команды и операндов (аргументов):
(&amp;lt;op&amp;gt; &amp;lt;arg1&amp;gt; [...&amp;lt;args&amp;gt;]) В качестве операции могут выступать базовые арифметические операции, встроенные в язык (+, -, * и /). Например
(+ 8 4) ;&amp;gt; 12 (здесь и далее ответы интерпретатора пишутся в комментарии, начинающемся с ;&amp;gt;)
(/ 128 8) ;&amp;gt; 16 Первое время кажется сложным воспринимать такую запись, где операция предшествует операндам.</description>
    </item>
    
    <item>
      <title>SICP: Введение</title>
      <link>https://vporoshok.me/post/2019/07/sicp-intro/</link>
      <pubDate>Tue, 30 Jul 2019 09:16:26 +0000</pubDate>
      
      <guid>https://vporoshok.me/post/2019/07/sicp-intro/</guid>
      <description>В очередной раз взялся за эту книгу, признанную фундаментальной для изучения программирования, основу для многих курсов и по сей день актуальную. Итак, знаменитая СИКП или книга Структура и интерпретация компьютерных программ. Эта книга, написанная в MIT, является классическим учебником программирования, используемым во многих университетах по всему миру.
Эта книга проводит читателя от азов программирования до сложных конструкций, вплоть до построения собственного интерпретатора языка. В ней разбирается то, как работает с кодом программ компьютер, а также то, как удобнее работать с ним человеку.</description>
    </item>
    
    <item>
      <title>Деревья поиска. АВЛ-деревья</title>
      <link>https://vporoshok.me/post/2018/12/search-tree/</link>
      <pubDate>Thu, 20 Dec 2018 14:00:00 +0000</pubDate>
      
      <guid>https://vporoshok.me/post/2018/12/search-tree/</guid>
      <description>Большие объёмы данных требуют особых подходов к задаче поиска. Если для нахождения элемента среди пары сотен элементов за линейное время достаточно хорошо, то когда речь идёт о тысячах и миллионах элементов, линейное время оказывается неоправданно большим. Можно воспользоваться известным нам бинарным поиском или даже его адаптацией галопированием. Но и это оказывается неэффективно при работе с данными, не влезающими в оперативную память. Действительно, пусть у нас есть файл размера 1 Гб с отсортированными данными.</description>
    </item>
    
    <item>
      <title>Как и для чего изучать алгоритмы</title>
      <link>https://vporoshok.me/post/2018/11/introduction/</link>
      <pubDate>Thu, 29 Nov 2018 14:00:00 +0000</pubDate>
      
      <guid>https://vporoshok.me/post/2018/11/introduction/</guid>
      <description>Иногда студенты, коллеги и знакомые задают мне вопросы о том
 почему нужно изучать алгоритмы? какой смысл в понимании оценок алгоритмов? для чего так много времени уделять алгоритмам, которые реализованы в стандартных библиотеках? пригождаются ли все эти знания в повседневной работе программиста? стоит ли разбираться javascript-разработчику с тем во что компилируется код на C и ассемблером вообще?  Отрывочно я старался отвечать на эти вопросы и раньше, однако теперь у меня сложилось более или менее целостное представление обо всех этих и многих других вопросах, кое я и попытаюсь изложить в этой статье.</description>
    </item>
    
    <item>
      <title>Кучи с эффективным слиянием</title>
      <link>https://vporoshok.me/post/2018/11/meldable-heaps/</link>
      <pubDate>Thu, 15 Nov 2018 14:00:00 +0000</pubDate>
      
      <guid>https://vporoshok.me/post/2018/11/meldable-heaps/</guid>
      <description>В статье про двоичную кучу было рассказано про устройство такой структуры данных как куча, а также приведён пример реализации в виде двоичной кучи. Такая реализация обладает двумя бесспорными преимуществами: простотой и компактностью хранения. Однако одна операция, часто требуемая от кучи в ней имеет слишком высокую сложность, эта операция слияние (meld). По сути лучшим способом слияния двоичных куч является построение новой кучи на объединённом массиве элементов. Сложность такой операции будет \(O(n + m)\) или, если одна из сливаемых куч сильно меньше другой, то можно поэлементно добавить первую ко второй, получив сложность \(O(n \log m)\).</description>
    </item>
    
    <item>
      <title>Слияние больших массивов данных</title>
      <link>https://vporoshok.me/post/2018/11/merge-sort-2/</link>
      <pubDate>Thu, 08 Nov 2018 14:00:00 +0000</pubDate>
      
      <guid>https://vporoshok.me/post/2018/11/merge-sort-2/</guid>
      <description>Итак, изучив кучи в первом приближении, можно вернуться к сортировке слиянием и рассмотреть те случаи, где другая сортировка работать не будет в принципе. Речь на этот раз пойдёт о таких объёмах данных, которые не влезают в оперативную (внутреннюю) память.
Об уровнях памяти Часто, говоря о памяти компьютера, предлагают рассматривать лишь оперативную (RAM) и дисковую (HDD / SSD). На самом деле уровней памяти в современном компьютере значительно больше. Если упростить некоторые вещи, то можно рассматривать следующую иерархию:</description>
    </item>
    
    <item>
      <title>Простая двоичная куча</title>
      <link>https://vporoshok.me/post/2018/11/simple-heap/</link>
      <pubDate>Fri, 02 Nov 2018 15:00:00 +0000</pubDate>
      
      <guid>https://vporoshok.me/post/2018/11/simple-heap/</guid>
      <description>Часто возникает необходимость «сортировать» динамический набор данных. Самым ярким примером такой задачи является очередь с приоритетом. По сути задача сводится к последовательному выбору минимумов из множества, при этом допускающего добавление к множеству новых элементов. Конечно, эту задачу можно решить с помощью сортировки начального множества, а новые элементы можно включать с помощью бинарной вставки. Однако, есть структуры данных, позволяющие реализовать необходимые операции за меньшую стоимость. Такая структура называется куча (heap).
Определение и базовые операции Кучей называется дерево, в котором любой элемент не меньше своего родителя.</description>
    </item>
    
    <item>
      <title>Сортировка слиянием</title>
      <link>https://vporoshok.me/post/2018/10/merge-sort/</link>
      <pubDate>Sat, 27 Oct 2018 08:53:31 +0000</pubDate>
      
      <guid>https://vporoshok.me/post/2018/10/merge-sort/</guid>
      <description>Сортировка слиянием один из тех редких алгоритмов, которые не устаревают, а напротив год от года развивается, получает новые публикации и исследования. Это действительно чудесный со многих сторон алгоритм, который находит применение в современном мире, а исследования, связанные с ним предлагают решения, применимые далеко за пределами сортировки. Это своего рода жемчужина среди всех алгоритмов сортировки.
Базовый алгоритм Mergesort является двойственным к быстрой сортировке и относится к классу алгоритмов «Разделяй и властвуй». Основной функцией этого алгоритма является функция слияния, которая получает на вход два отсортированных массива и возвращает их отсортированное объединение.</description>
    </item>
    
  </channel>
</rss>
